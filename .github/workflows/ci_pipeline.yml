name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: '${{ secrets.DOCKER_USER }}'
          password: '${{ secrets.DOCKER_USER }}'
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: tgkirupakaran/kurunagai-admin-api
      
      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1.0.2
        with:
          # Name of the container image to deploy (e.g. gcr.io/cloudrun/hello:latest).
      Required if not using a service YAML.
          image: docker.io/tgkirupakaran/kurunagai-admin-api:main
          # ID of the service or fully qualified identifier for the service.
      Required if not using a service YAML.
          service: # optional
          # Region in which the resource can be found.
          region: # optional, default is us-central1
          # List of key-value pairs to set as environment variables in the format:
      KEY1=VALUE1,KEY2=VALUE2. Existing environment variables will be retained.
      If both "env_vars" and "env_vars_file" are specified, the keys in
      "env_vars" will take precendence over the keys in "env_vars_files".
          env_vars: # optional
          # Path to a file on disk, relative to the workspace, that defines
      environment variables. The file can be newline-separated KEY=VALUE pairs,
      JSON, or YAML format. If both "env_vars" and "env_vars_file" are
      specified, the keys in "env_vars" will take precendence over the keys in
      "env_vars_files".
          env_vars_file: # optional
          # List of key-value pairs to set as either environment variables or mounted
      volumes in the format:
      KEY1=secret-key-1:latest,/secrets/api/key=secret-key-2:latest. Existing
      secrets will be retained.
          secrets: # optional
          # List of key-value pairs to set as labels of cloud run service in the format:
      KEY1=VALUE1,KEY2=VALUE2. Existing labels will be retained.
          labels: # optional
          # Skip applying the special annotation labels that indicate the deployment
      came from GitHub Actions.
          skip_default_labels: # optional
          # YAML service description for the Cloud Run service.
          metadata: # optional
          # The Google Cloud Project ID. If unset, this is inherited from the environment.
          project_id: # optional
          # The location of the source to build. The location can be a directory on
      a local disk or a gzipped archive file (.tar.gz) in Google Cloud Storage.
      The role `Cloud Build Service Account` is required.
          source: # optional
          # Specify the suffix of the revision name. Revision names always start with
      the service name automatically. For example, specifying 'v1' for a service
      named 'helloworld', would lead to a revision named 'helloworld-v1'.
          suffix: # optional
          # Traffic tag to assign to the newly created revision.
          tag: # optional
          # Set the maximum request execution time. It is specified as a duration; for
      example, "10m5s" is ten minutes and five seconds. If you don't specify a
      unit, seconds is assumed.
          timeout: # optional
          # True to avoid sending traffic to the revision being deployed. Setting
      this flag assigns any traffic assigned to the LATEST revision to the
      specific revision bound to LATEST before the deployment. The effect is
      that the revision being deployed will not receive traffic. After a
      deployment with this flag the LATEST revision will not receive traffic
      on future deployments.
          no_traffic: # optional
          # Comma separated list of traffic assignments in the form REVISION-NAME=PERCENTAGE.
      REVISION-NAME must be the name for a revision for the service as returned
      by 'gcloud beta run list revisions'. PERCENTAGE must be an integer
      percentage between 0 and 100 inclusive.
      Ex service-nw9hs=10,service-nw9hs=20 Up to 100 percent of traffic may be
      assigned. If 100 percent of traffic is assigned, the Service traffic is
      updated as specified. If under 100 percent of traffic is assigned, the
      Service traffic is updated as specified for revisions with assignments and
      traffic is scaled up or down down proportionally as needed for revision
      that are currently serving traffic but that do not have new assignments.
          revision_traffic: # optional
          # Comma separated list of traffic assignments in the form TAG=PERCENTAGE.
      TAG must match a traffic tag on a revision of the service. PERCENTAGE must
      be an integer percentage between 0 and 100 inclusive. Up to 100 percent of
      traffic may be assigned. If 100 percent of traffic is assigned, the service
      traffic is updated as specified. If under 100 percent of traffic is
      assigned, the service traffic is updated as specified to the given tags,
      and other traffic is scaled up or down proportionally.
          tag_traffic: # optional
          # Space separated list of other Cloud Run flags, examples can be found:
      https://cloud.google.com/sdk/gcloud/reference/run/deploy#FLAGS. Ex
      --service-account=my-account@project.iam.gserviceaccount.com --concurrency=10
          flags: # optional
          # Version of the Cloud SDK to install. If unspecified or set to "latest",
      the latest available gcloud SDK version for the target platform will be
      installed. Example: "290.0.1".
          gcloud_version: # optional
          # Version of the Cloud SDK components to install and use. If unspecified, the latest
      or released version will be used. This is the equivalent of running
      'gcloud alpha run' or 'gcloud beta run'. Valid values are `alpha` or `beta`.
          gcloud_component: # optional
